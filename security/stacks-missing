#!/usr/bin/env ruby

# This is a simple puppetdb wrapper that prints all servers in a list of stacks
# from the command line.

require 'puppetdb'
require 'csv'
require 'optparse'

# Parse the options, used to tell if we're doing a bare report or one in CSV.
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: stacks-missing [options]"
  opts.on('--csv', 'Format the report as CSV') do
    options[:csv] = true
  end
end.parse!

contacts = {}
contacts_fname = ARGV[0]
if !contacts_fname.nil? && File.exist?(contacts_fname)
  File.readlines(contacts_fname).each do |line|
    if line =~ /^(\S+): (\S+)/
      stack = $~[1]
      address = $~[2]
      contacts[stack] = address
    end
  end
end

# Get the servers to act on from given stack names.
stack_hostnames = {}
client = PuppetDB::Client.new(server: 'http://sulpuppet4-db.stanford.edu:8080')
response = client.request('facts', ['=', 'name', 'stack'])
#stack_hostnames << response.data.collect { |x| x['certname'] }
response.data.each do |r|
  hostname = r['certname']
  stack = r['value']
  stack_hostnames[hostname] = stack
end

all_hostnames = []
response = client.request('nodes', ['~', 'certname', '.*'])
all_hostnames << response.data.collect { |x| x['certname'] }
all_hostnames.flatten!

# Print a header if printing to CSV.
if options[:csv]
  puts ['Hostname', 'Missing stack'].to_csv
end

# Actually print the report.
all_hostnames.sort.each do |host|
  message = ''
  if stack_hostnames.key?(host) && !stack_hostnames[host].nil?
    if stack_hostnames[host] == 'unknown'
      message = "Unknown stack"
    elsif !contacts.empty?
      host_stack = stack_hostnames[host]
      short_host_stack = host_stack.sub(/-(dev|stage|prod)/, '')
      if !contacts.key?(host_stack) && !contacts.key?(short_host_stack)
        message = "No contact mail for #{host_stack}"
      end
    end
  else
    message = 'No stack'
  end
  next if message.empty?

  if options[:csv]
    puts [host, message].to_csv
  else
    printf("%-50s %s\n", host, message)
  end
end
