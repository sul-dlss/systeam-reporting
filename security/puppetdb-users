#!/usr/bin/env ruby

# This is a puppetdb wrapper meant to do a report on non-standard users on
# systems.

require 'puppetdb'
require 'csv'
require 'optparse'

# Current sysadmin list.  It would be nice to generate this from a workgroup,
# but I can't find any that match.
sysadmins  = [
    'azanella',
    'calavt',
    'efahy',
    'jmorley',
    'jonrober',
    'kamchan',
    'rsmith11',
    'ssklar',
]

# Everyone else in SUL.
other_sul = [
    'ahafele',
    'amcollie',
    'atz',
    'awinget',
    'blalbrit',
    'cabeer',
    'cmharlow',
    'dclure',
    'dlweber',
    'dlrueda',
    'drh',
    'geisler',
    'jcoyne85',
    'jgreben',
    'jkeck',
    'laneymcg',
    'lmcrae',
    'mahmed',
    'ndushay',
    'ntay',
    'petucket',
    'pjreed',
    'rlunnon',
    'snydman',
    'suntzu',
    'tommyi',
    'vtang',
    'saravs',
]

# Various system users that have login accounts.
system_users = [
    'apache',
    'dor_indexer',
    'ezproxy',
    'mcollective',
    'nagiosuser',
    'nfsnobody',
    'nrpe',
    'oracle',
    'puppet',
    'root',
    'splunk',
    'sultsm10',
    'sultsm20',
    'sultsm30',
    'sultsm99',
]

# And known group-user accounts, where we create an account for multiple people
# to log in.
groups = [
    'bibliopedia',
    'blacklight',
    'cidr',
    'consul',
    'curator',
    'dewi',
    'directory',
    'dpglab',
    'eems',
    'embed',
    'etd',
    'exhibits',
    'explorer',
    'flexlm',
    'geostaff',
    'harvestdor',
    'htext',
    'htext_user',
    'image_viewer',
    'libhours',
    'library_hours',
    'loris',
    'lyberadmin',
    'lockss',
    'mathlm',
    'ossec',
    'parker',
    'purl',
    'releases',
    'reporting',
    'requests',
    'reserves',
    'sandbox',
    'sdr2service',
    'solr',
    'squeezer',
    'stacks',
    'sulmuse',
    'was',
    'webteam',
    'wowza',
    'xtf',
    'zkeeper',
]

#######################################################################
# Main program
#######################################################################

# Parse the options, used to tell if we're doing a bare report or one in CSV.
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: stacks-missing [options]"
  opts.on('--csv', 'Format the report as CSV') do
    options[:csv] = true
  end
end.parse!

# Get all user resources to act on.
hosts = {}
client = PuppetDB::Client.new(server: 'http://sulpuppet-db.stanford.edu:8080')
response = client.request('resources', ['=', 'type', 'User'])
response.data.each do |response|
  username = response['title']
  hostname = response['certname']

  # Ignore users without login shells.
  next if response['parameters']['shell'] == '/sbin/nologin'

  # Ignmore any users in our known lists.
  next if sysadmins.include?(username)
  next if other_sul.include?(username)
  next if system_users.include?(username)
  next if groups.include?(username)

  # We have a lot of system users that are named after part of the hostname.
  # There are two cases here -- either where hostname starts with sul- or
  # cidr- and the username is that second part, or where the hostname doesn't
  # start with that and the username is the entire first part.
  if hostname =~ /^(sul|cidr)-([^-]+)-/
    next if username == $~[2]
  elsif hostname =~ /^([^-]+)-/
    next if username == $~[1]
  end

  hosts[hostname] = [] unless hosts.key?(hostname)
  hosts[hostname].push(username)
end

# Actually print the report.
puts ['Hostname', 'Users'].to_csv
hosts.keys.sort.each do |hostname|
  users = hosts[hostname].join("|")
  puts [hostname, users].to_csv
end
