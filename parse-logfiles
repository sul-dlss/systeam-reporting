#!/usr/bin/ruby

# This script goes through a report generated by server-logfiles and then
# provides a summary of the log sizes used in the past X days.

require 'filesize'
require 'optparse'
require 'yaml'

# Defaults.
period_days = 31

# Parse the options, currently --verbose and --period.
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: parse-logfiles [options] <filename>"
  opts.on('-v', '--verbose', 'Give information about logfiles') do
    options[:verbose] = true
  end
  opts.on('-p', '--period [DAYS]', 'Use a custom period of days') do |p|
    period_days = p
  end
end.parse!

period = 60 * 60 * 24 * period_days.to_i
period_time = Time.at(Time.now.to_i - period)

raise "Usage: parse-logfiles [options] <filename>" if ARGV.empty?
reportfile = ARGV[0]
raise "No such filename: #{reportfile}" unless File.exist?(reportfile)

total = 0
servers = YAML.load_file(reportfile)
servers.keys.sort.each do |hostname|
  server_total = 0
  files = []
  servers[hostname].keys.sort.each do |fname|
    next if servers[hostname][fname]['date'] < period_time
    server_total += servers[hostname][fname]['size'].to_i

    # If verbose and the file isn't empty, add file info to a list to print.
    next if servers[hostname][fname]['size'].to_i == 0
    next unless options[:verbose]
    files << format("\t%-28s %-13s %s", servers[hostname][fname]['date'],
                    Filesize.from(servers[hostname][fname]['size'].to_s + ' B').pretty,
                    fname)
  end

  # Print out the server information, and optional files if any.
  total += server_total
  human_total = Filesize.from(server_total.to_s + ' B').pretty
  puts format("%-44s %s", hostname, human_total)
  files.each do |f|
    puts f
  end
end

# Print out a final total.
human_total = Filesize.from(total.to_s + ' B').pretty
puts
puts "Total: #{human_total}"
