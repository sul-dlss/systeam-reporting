#!/usr/bin/env ruby

require 'net/smtp'
require 'open3'
require 'yaml'

EMAIL_TO = 'rsmith11@stanford.edu'.freeze

# Given a message, send it out as an email.
def mail_message(message)
    Net::SMTP.start('localhost') do |smtp|
      smtp.send_message message, 'nobody@stanford.edu', EMAIL_TO
    end
end

tfchanges = []
tffailed = []
report = {}
cachefile = '/home/terraform/terraform.yaml'

Dir.chdir("/home/terraform/terraform/hosts/")
stdout,stderr,status = Open3.capture3('terraform init')
if status.success?
  Dir.glob("/home/terraform/terraform/hosts/*.tf") {|tffile|

  File.open(tffile) do |f|
    f.each_line do |line|
      if line =~ /^module/
        tfmodule = line.gsub!(/"/, '').gsub!(/\s+/,'').gsub(/\{|\}/, '').insert(6,'.')
	      report[tfmodule] = {}
  	    output, error, status = Open3.capture3("terraform plan --detailed-exitcode --target=#{tfmodule}")
	      if status.exitstatus == 2
          tfchanges.push(tfmodule)
	        report[tfmodule]['tfchanges'] = 1
        end
        if status.exitstatus == 1
              tffailed.push(tfmodule)
	        report[tfmodule]['tffailed'] = 1
        end
      end
      if line =~ /^resource/
        tfmodule = line.gsub!(/"/, '').gsub!(/\{|\}/, '').strip.gsub!(/\s+/,'.')
        tfresource = tfmodule.partition('.').last
	      report[tfresource] = {}
        output, error, status = Open3.capture3("terraform plan --detailed-exitcode --target=#{tfresource}")
	      puts tfresource
	      puts output
        if status.exitstatus == 2
          tfchanges.push(tfresource)
	        report[tfresource]['tfchanges'] = 1
        end
        if status.exitstatus == 1
          tffailed.push(tfresource)
	        eport[tfresource]['tffailed'] = 1
        end
      end
    end
  end
  File.open(cachefile,"w") { |file| file.write(report.to_yaml)}
  }
else
  abort 'error: could not run terraform init'
end


message = ''
message << "From: Do Not Reply <nobody@stanford.edu>\n"
message << "To: #{EMAIL_TO}\n"
message << "Subject: Terraform hosts that are having problems\n"
message << "\n"

message << "Hosts with Terraform proposed changes\n"
message << "-------------------------------\n"
tfchanges.sort.each do |server|
  message << server + "\n"
end
message << "\n"

message << "Hosts with Terraform errors\n"
message << "-------------------------------------------------\n"
tffailed.sort.each do |server|
  message << server + "\n"
end
message << "\n"

mail_message(message)

