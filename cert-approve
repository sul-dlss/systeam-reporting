#!/bin/bash

# Script to help automate making certificate requests by updating vault with an
# approved cert.

if [[ ! $1 || ! $2 ]]; then
    echo "usage: cert-approve <hostname> <certfile> <pfx>"
    exit 1
fi

# Get the hostname and append .stanford.edu if no domain is given.
HOSTNAME=$1
if [[ $HOSTNAME != *.* ]]; then
    HOSTNAME="${HOSTNAME}.stanford.edu"
fi

# Exit if the given certfile does not exist.
CERTFILE=$2
if [[ ! -s $CERTFILE ]]; then
    echo "$CERTFILE does not exist"
    exit 1
fi

mkdir -p certs

# We might be renewing an existing cert request or approving a new one.  In the
# latter case, we've saved two -pending records that we want to move to
# non-pending.  In the latter, we only want to update the cert.  Either way,
# only exit on failures after we've tried to read the pending files, since we
# don't want to stop the script if they're not there.
vault kv get -field content puppet/${HOSTNAME}/ssl-key-pending > certs/${HOSTNAME}.key
vault kv get -field content puppet/${HOSTNAME}/ssl-csr-pending > certs/${HOSTNAME}.csr
set -e
if [[ -e certs/${HOSTNAME}.key && -s certs/${HOSTNAME}.key && -e certs/${HOSTNAME}.csr && -s certs/${HOSTNAME}.csr ]]; then
    vault kv put puppet/${HOSTNAME}/ssl-key content=@certs/${HOSTNAME}.key
    vault kv put puppet/${HOSTNAME}/ssl-csr content=@certs/${HOSTNAME}.csr

    # Now that we've successfully copied, delete the pending records.
    vault kv delete puppet/${HOSTNAME}/ssl-key-pending
    vault kv delete puppet/${HOSTNAME}/ssl-csr-pending
fi

# Finally update the cert in vault.
vault kv put puppet/${HOSTNAME}/ssl-cert content=@"${CERTFILE}"

# If pfx is set, then create pfx certs for Windows servers
if [[ -n $3 && $3 == 'pfx' ]]; then
    openssl pkcs7 -print_certs -in ${CERTFILE} -out certs/${HOSTNAME}.pem
    openssl pkcs12 -export -in certs/${HOSTNAME}.pem  -inkey certs/${HOSTNAME}.key -out certs/${HOSTNAME}.pfx -passout pass:
    echo "certs/${HOSTNAME}.pfx created"
fi
