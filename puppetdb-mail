#!/usr/bin/env ruby
#
# Use the already created puppet node state yaml file to send out a mailing
# about each server failed, quiet, or tangled.

require 'github_create_issues'
require 'optparse'
require 'net/smtp'
require 'yaml'

require 'json'
require 'uri'
require 'net/http'

require 'no_proxy_fix'

EMAIL_TO = 'sul-sysadmin-rpts@lists.stanford.edu'.freeze
PUPPET_STATE = '/var/lib/systems-dashboard/puppetstate.yaml'
SERVER_STATE = '/var/lib/systems-dashboard/servers.yaml'

# List sysadmins by sunetid mapping to github uid.
@SYSADMINS = {
  'jonrober' => 'jonrober',
  'ssklar'   => 'ssklar',
  'rsmith11' => 'rsmith11',
  'azanella' => 'tallenaz',
  'jmorley'  => 'julianmorley',
  'kamchan'  => 'kamchan',
}
@opsgenie_apikey = File.open('/etc/tokens/opsgenie.api').read

# Data for github issue creation.
@repo  = 'sul-dlss/operations-tasks'
@label = 'puppet-notreporting'
@token = File.open('/etc/tokens/github-oauth-token', 'rb').read
@desc = 'Please check to make sure that puppet is running, enabled, and against a good branch.'

#############################################################################
# Opsgenie functions
#############################################################################

# Perform a request against opsgenie and return the JSON response.
def opsgenie_fetch_json(url, params, req_type)
  uri = URI(url)
  https = Net::HTTP.new(uri.host, uri.port)
  https.use_ssl = true
  header = {
    "Content-Type"  => "application/json",
    "Authorization" => "GenieKey #{@opsgenie_apikey}"
  }
  begin
    if req_type == 'post'
      res = https.post(uri.path, params, initheader = header)
    else
      uri.query = params.to_json
      res = https.get(uri.path, initheader = header)
    end
    if res.is_a?(Net::HTTPSuccess)
      return JSON.parse(res.body)
    else
      puts res
      return false
    end
  rescue => e
    puts "#{e}: #{uri.host}, #{uri.port}"
    return false
  end
end

# Request the on-call responder from OpsGenie and return it.
def on_call
  url = "https://api.opsgenie.com/v2/schedules/on-calls"
  params = nil
  response =  opsgenie_fetch_json(url, params, 'get')

  responder = ''
  response['data'].each do |r|
    next if r['_parent']['name'] != 'ops_team_schedule'
    responder = r['onCallParticipants'][0]['name'].gsub(/@stanford\.edu$/, '')
    break
  end

  responder
end

#############################################################################
# Support functions
#############################################################################

# Given a message, send it out as an email.
def mail_message(message)
  Net::SMTP.start('localhost') do |smtp|
    smtp.send_message message, 'nobody@stanford.edu', EMAIL_TO
  end
end

# Go through each quiet server, discover the assignee for the server, and then
# create an issue subject for that person + server.
def quiet_issues(quiet, issues, report)
  quiet.keys.each do |server|
    assignee = server_assignee(server, report[server]['environment'])
    issues[assignee] = [] unless issues.key?(assignee)
    issues[assignee].push("#{server} has not run puppet in over 24 hours")
  end

  issues
end

# Go through each failed server, discover the assignee for the server, and then
# create an issue subject for that person + server.
def failed_issues(failed, issues, report)
  failed.each do |server|
    assignee = server_assignee(server, report[server]['environment'])
    issues[assignee] = [] unless issues.key?(assignee)
    issues[assignee].push("#{server}'s puppet runs are failing")
  end

  issues
end

# Given data structures for the quiet and failed servers, create issues for
# each in github.
def create_issues(quiet, failed, report)
  issues = {}
  issues = quiet_issues(quiet, issues, report)
  issues = failed_issues(failed, issues, report)

  # Now create each of these as a github issue.
  issues.each_key do |assignee|
    i = issues[assignee]
    github_uid = @SYSADMINS[assignee]
    GithubCreateIssues.add_github_issues(@token, @repo, @label, i, @desc,
                                         github_uid)
  end
end

def server_assignee(server, environment)
  if (server =~ /^dlss-(dev|win)-(\S+)\.stanford\.edu$/)
    assignee = Regexp.last_match[2]
    return assignee if @SYSADMINS.has_key?(assignee)
  end

  assignee = @default_asignee
  @SYSADMINS.each_key do |s|
    next unless environment =~ /^#{s}/
    assignee = s
    break
  end

  assignee
end

def short_hostname(server)
  short = server.sub('.stanford.edu', '')
  short
end

#############################################################################
# Main routine
#############################################################################

# Parse the options, currently --verbose and --period.
options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: puppetdb-mail [options]"
  opts.on('-d', '--dryrun', 'Do not send mail or create tickets') do
    options[:dryrun] = true
  end
end.parse!

@default_asignee = on_call

quiet = {}
tangled = []
failed = []
servers_all = YAML.load_file(SERVER_STATE)
report = YAML.load_file(PUPPET_STATE)
report.keys.each do |server|
  failed.push(server) if report[server].key?('failed')
  tangled.push(server) if report[server].key?('tangled')

  next unless report[server].key?('too_quiet')
  quiet[server] = report[server]['too_quiet']
end

message = ''
message << "From: Do Not Reply <nobody@stanford.edu>\n"
message << "To: #{EMAIL_TO}\n"
message << "Subject: Puppet servers currently having problems\n"
message << "\n"

message << "Servers with failed puppet runs\n"
message << "-------------------------------\n"
failed.sort.each do |server|
  message << format("%-35s %s\n", short_hostname(server), report[server]['environment'])
end
message << "\n"

message << "Servers without any puppet runs for over 24 hours\n"
message << "-------------------------------------------------\n"
quiet.keys.sort.each do |server|
  message << format("%-35s %-25s %s\n", short_hostname(server), report[server]['environment'], quiet[server])
end
message << "\n"

message << "Servers without any puppet runs in puppetdb\n"
message << "-------------------------------------------------\n"
servers_all.keys.sort.each do |server|
  next if report.key?(server)
  next unless servers_all[server].key?('vmware')
  next if server.match(/^sul-vcenter/)
  next if server == 'bodoni.stanford.edu'
  message << format("%s\n", short_hostname(server))
end
message << "\n"

if (options[:dryrun])
  puts message
else
  mail_message(message)
  #create_issues(quiet, failed, report)
end
