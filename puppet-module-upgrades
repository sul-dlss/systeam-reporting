#!/usr/bin/env ruby
#
# Scan the puppet modules to find those that have pending updates.

require 'github_create_issues'
require 'json'
require 'httparty'

moduledir = 'modules'

# transition - public advertised version older than current version
# puppet_agent - public advertised version older than current version
# epel - we have our own version that we pretend is the main
ignoremodules = ['dovecot', 'logrotate', 'transition', 'puppet_agent', 'epel']

# Data for github issue creation.
@repo  = 'sul-dlss/operations-tasks'
@label = 'puppet-notreporting'
@token = File.open('/etc/tokens/github-oauth-token', 'rb').read

Dir.foreach(moduledir) do |entry|
  path = moduledir + '/' + entry
  metadata = path + '/metadata.json'

  # Only care about directories with a metadata file.
  next unless File.directory?(path)
  next unless File.exists?(metadata)
  next if ignoremodules.include?(entry)

  # Read the metadata and parse it out to get the current module version.
  current_json     = File.read(metadata)
  current_metadata = JSON.parse(current_json)
  current_version  = current_metadata['version']
  module_name      = current_metadata['name']

  next if current_metadata['source'] == ''

  # Pretty up the URL that we print out, so that the git source is repackaged
  # into the URL to look up for changes.
  url = current_metadata['source'].dup
  url.sub!(/^git clone /, '')
  url.sub!(/^git:/, 'https:')
  url.sub!(/^git@github.com:/, 'https://github.com/')
  url.sub!(/\.git$/, '')

  #
  module_name.sub!(/^puppetlabs\//, 'puppetlabs-')
  forge_url  = "https://forgeapi.puppetlabs.com/v3/modules/#{module_name}"
  forge_data = HTTParty.get(forge_url)
  #puts module_name
  #puts forge_url
  upstream_version = forge_data['current_release']['version']

  next if upstream_version == current_version
  printf("%-25s %-12s %-12s %s\n", entry, current_version, upstream_version,
                                   url)

  subject = ["Upgrade puppet module #{entry}"]
  desc    = sprintf("Puppet module %s needs upgrade from %s to %s\n\n%s",
                    entry, current_version, upstream_version,
                    current_metadata['source'])
#  GithubCreateIssues.add_github_issues(@token, @repo, @label, subject, desc,
#                                       'jonrober')
end
